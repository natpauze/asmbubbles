     1                                  
     2                                  ;basically jsut for a warm up, done in parts, from here https://www.briansteffens.com/introduction-to-64-bit-assembly/01-hello-world/
     3                                  
     4                                  ;define handy macros 
     5                                  %define sys_write 1
     6                                  %define stdout 1
     7                                  
     8                                  %define sys_exit 60
     9                                  %define success_exit 0
    10                                  
    11                                  %define nl 10
    12                                  
    13                                  
    14                                  
    15                                  section .data
    16                                  
    17 00000000 48656C6C6F2C20776F-         message db "Hello, world!", nl
    17 00000009 726C64210A         
    18                                  	;messageLen dw $-message
    19 0000000E 0E00                        messageLen dw 14
    20                                  
    21 00000010 746573740A                  testmessage db "test", nl
    22                                  	;messageLen dw $-message
    23 00000015 0500                        testmessageLen dw 5
    24                                  
    25 00000017 61697568776772616C-         toSort db "aiuhwgralpiuerhjgo",59,"paidfugaopiger", nl
    25 00000020 7069756572686A676F-
    25 00000029 3B7061696466756761-
    25 00000032 6F70696765720A     
    26                                  	;toSortLen dw $-toSort
    27 00000039 2200                        toSortLen dw 34
    28                                  
    29                                  section .text	 
    30                                  
    31                                  
    32                                  ; Printing function jsut for fun, pass pointer in rdi and len in rsi
    33                                  print:
    34 00000000 4889F2                      mov rdx, rsi
    35 00000003 4889FE                      mov rsi, rdi 
    36 00000006 B801000000                  mov rax, sys_write	 
    37 0000000B BF01000000                  mov rdi, stdout		
    38 00000010 0F05                        syscall
    39 00000012 C3                      ret
    40                                  
    41                                  
    42                                  global _start
    43                                  _start:
    44                                      ;ok, why on earth does this first print not show up? 
    45 00000013 48BF-                       mov rdi, message
    45 00000015 [0000000000000000] 
    46 0000001D 488B3425[0E000000]          mov rsi, [messageLen]
    47 00000025 E8D6FFFFFF                  call print
    48                                  
    49 0000002A 48BF-                       mov rdi, testmessage
    49 0000002C [1000000000000000] 
    50 00000034 488B3425[15000000]          mov rsi, [testmessageLen]
    51 0000003C E8BFFFFFFF                  call print
    52                                  
    53                                      ;actual sorting
    54                                  
    55                                  
    56                                  
    57                                  
    58 00000041 48BF-                       mov rdi, toSort
    58 00000043 [1700000000000000] 
    59 0000004B 488B3425[39000000]          mov rsi, [toSortLen]
    60 00000053 E8A8FFFFFF                  call print
    61                                  
    62                                  
    63                                      			 
    64                                  end:
    65 00000058 B83C000000              	mov rax, sys_exit	
    66 0000005D BF00000000                  mov rdi, success_exit	
    67 00000062 0F05                        syscall
